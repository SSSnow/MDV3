"# Micro Vision Device <mvdevice@outlook.com> CopyRight\n"
"# Blob Detection Example\n"
"import sensor, image, time, lcd\n"
"from pyb import Pin\n"
"\n"
"key = Pin('PC3', Pin.IN, Pin.PULL_UP)\n"
"\n"
"key_state = 0\n"
"key_event = 0\n"
"\n"
"vf_state = 1\n"
"vf_w = 30\n"
"vf_h = 30\n"
"vf_threshold = ( -20,   60,   30,   90,   30,   70) # default to red_threashold\n"
"orange_threshold   =  (   19,   59,  17,   57,   10,   50)\n"
"green_threshold   = (   0,   80,  -70,  -10,   -0,   30)\n"
"red_threshold     = ( -20,   60,   30,   90,   30,   70)\n"
"blue_threshold    = (  20,  100,   -0,   60,  -60,  -30)\n"
"\n"
"sensor.reset() # Initialize the camera sensor.\n"
"sensor.set_pixformat(sensor.RGB565) # use RGB565.\n"
"sensor.set_framesize(sensor.QCIF) # use QQVGA for speed.\n"
"sensor.skip_frames(10) # Let new settings take affect.\n"
"# sensor.set_whitebal(False) # turn this off.\n"
"clock = time.clock() # Tracks FPS.\n"
"\n"
"lcd.init(type = 2) # Z240IT010,\n"
"lcd.set_backlight(1)\n"
"lcd.clear()\n"
"\n"
"while(True):\n"
"    if (key_state == 0):\n"
"        if (key.value() == 0):\n"
"            key_state = key_state + 1\n"
"    elif (key_state < 2):\n"
"        key_state = key_state + 1\n"
"    elif (key_state == 2):\n"
"        key_state = key_state + 1\n"
"        key_event = 1\n"
"    else:\n"
"            if (key.value() == 1):\n"
"                key_state = 0\n"
"\n"
"    clock.tick() # Track elapsed milliseconds between snapshots().\n"
"    img = sensor.snapshot() # Take a picture and return the image.\n"
"    if (key_event == 1):\n"
"        if (vf_state == 0):\n"
"            vf_state = 1\n"
"        else:\n"
"            vf_state = 0\n"
"        key_event = 0\n"
"\n"
"    if (vf_state == 0):\n"
"        blobs = img.find_blobs([vf_threshold])\n"
"        if blobs:\n"
"            for b in blobs:\n"
"                img.draw_rectangle(b[0:4]) # rect\n"
"                img.draw_cross(b[5], b[6]) # cx, cy\n"
"\n"
"    if (vf_state == 1):\n"
"        statstics = img.statistics(roi=((int(img.width() / 2) - int(vf_w / 2)), (int(img.height() / 2) - int(vf_h / 2)), vf_w, vf_h))\n"
"        vf_threshold = (statstics[4], statstics[5], statstics[12], statstics[13], statstics[20], statstics[21])\n"
"        img.draw_string(0, 0,  'L ' + str(statstics[0]) + ',' + str(statstics[4]) + ',' + str(statstics[5]))\n"
"        img.draw_string(0, 8,  'A ' + str(statstics[8]) + ',' + str(statstics[12]) + ',' + str(statstics[13]))\n"
"        img.draw_string(0, 16, 'B ' + str(statstics[16]) + ',' + str(statstics[20]) + ',' + str(statstics[21]))\n"
"        img.draw_rectangle(((int(img.width() / 2) - int(vf_w / 2)), (int(img.height() / 2) - int(vf_h / 2)), vf_w, vf_h))\n"
"        img.draw_string(32, 120, '[Select Color]', color=0x00F8)\n"
"\n"
"    lcd.display(img)\n"
